plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id "com.diffplug.spotless" version "5.16.0"
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
//   ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithSpaces(3) // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
		setEncoding('utf-8')
	}
	java {
		eclipse() // I like eclipse formatting over google
//      googleJavaFormat('1.11.0').aosp().reflowLongStrings(), this is the other option
	}
}

group = 'br.com.tech'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(22)
	}
}

compileJava {
	options.compilerArgs = [
			'-Amapstruct.defaultComponentModel=spring',
			'--enable-preview'
	]
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.2")
}

dependencies {
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-cache")
	implementation("org.springframework.boot:spring-boot-starter-validation")
	implementation("org.springframework.boot:spring-boot-starter-amqp")
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
	implementation("org.mapstruct:mapstruct:1.6.0.Beta1")
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0.Beta1'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0")



	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	runtimeOnly("org.flywaydb:flyway-database-postgresql:10.15.0")
	testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
	runtimeOnly("com.h2database:h2")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testAnnotationProcessor("org.mapstruct:mapstruct-processor:1.6.0.Beta1")

	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'

	testCompileOnly 'org.projectlombok:lombok:1.18.32'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
